//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CallRecordingClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CallRecord", Namespace="http://schemas.datacontract.org/2004/07/CallRecordingService")]
    [System.SerializableAttribute()]
    public partial class CallRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeOfCallField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalDetails {
            get {
                return this.AdditionalDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalDetailsField, value) != true)) {
                    this.AdditionalDetailsField = value;
                    this.RaisePropertyChanged("AdditionalDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName {
            get {
                return this.CustomerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerNameField, value) != true)) {
                    this.CustomerNameField = value;
                    this.RaisePropertyChanged("CustomerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Importance {
            get {
                return this.ImportanceField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportanceField, value) != true)) {
                    this.ImportanceField = value;
                    this.RaisePropertyChanged("Importance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeOfCall {
            get {
                return this.TimeOfCallField;
            }
            set {
                if ((this.TimeOfCallField.Equals(value) != true)) {
                    this.TimeOfCallField = value;
                    this.RaisePropertyChanged("TimeOfCall");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ICallRecordingService")]
    public interface ICallRecordingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/RecordCall", ReplyAction="http://tempuri.org/ICallRecordingService/RecordCallResponse")]
        void RecordCall(CallRecordingClient.ServiceReference.CallRecord call);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/RecordCall", ReplyAction="http://tempuri.org/ICallRecordingService/RecordCallResponse")]
        System.Threading.Tasks.Task RecordCallAsync(CallRecordingClient.ServiceReference.CallRecord call);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/GetAllCalls", ReplyAction="http://tempuri.org/ICallRecordingService/GetAllCallsResponse")]
        CallRecordingClient.ServiceReference.CallRecord[] GetAllCalls();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/GetAllCalls", ReplyAction="http://tempuri.org/ICallRecordingService/GetAllCallsResponse")]
        System.Threading.Tasks.Task<CallRecordingClient.ServiceReference.CallRecord[]> GetAllCallsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/GetCallById", ReplyAction="http://tempuri.org/ICallRecordingService/GetCallByIdResponse")]
        CallRecordingClient.ServiceReference.CallRecord GetCallById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/GetCallById", ReplyAction="http://tempuri.org/ICallRecordingService/GetCallByIdResponse")]
        System.Threading.Tasks.Task<CallRecordingClient.ServiceReference.CallRecord> GetCallByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/UpdateCall", ReplyAction="http://tempuri.org/ICallRecordingService/UpdateCallResponse")]
        void UpdateCall(int id, string additionalDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/UpdateCall", ReplyAction="http://tempuri.org/ICallRecordingService/UpdateCallResponse")]
        System.Threading.Tasks.Task UpdateCallAsync(int id, string additionalDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/DeleteCall", ReplyAction="http://tempuri.org/ICallRecordingService/DeleteCallResponse")]
        void DeleteCall(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/DeleteCall", ReplyAction="http://tempuri.org/ICallRecordingService/DeleteCallResponse")]
        System.Threading.Tasks.Task DeleteCallAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/SaveCallsToFile", ReplyAction="http://tempuri.org/ICallRecordingService/SaveCallsToFileResponse")]
        void SaveCallsToFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/SaveCallsToFile", ReplyAction="http://tempuri.org/ICallRecordingService/SaveCallsToFileResponse")]
        System.Threading.Tasks.Task SaveCallsToFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/LoadCallsFromFile", ReplyAction="http://tempuri.org/ICallRecordingService/LoadCallsFromFileResponse")]
        void LoadCallsFromFile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/LoadCallsFromFile", ReplyAction="http://tempuri.org/ICallRecordingService/LoadCallsFromFileResponse")]
        System.Threading.Tasks.Task LoadCallsFromFileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/SearchCallsByCustomerName", ReplyAction="http://tempuri.org/ICallRecordingService/SearchCallsByCustomerNameResponse")]
        CallRecordingClient.ServiceReference.CallRecord[] SearchCallsByCustomerName(string customerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICallRecordingService/SearchCallsByCustomerName", ReplyAction="http://tempuri.org/ICallRecordingService/SearchCallsByCustomerNameResponse")]
        System.Threading.Tasks.Task<CallRecordingClient.ServiceReference.CallRecord[]> SearchCallsByCustomerNameAsync(string customerName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICallRecordingServiceChannel : CallRecordingClient.ServiceReference.ICallRecordingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CallRecordingServiceClient : System.ServiceModel.ClientBase<CallRecordingClient.ServiceReference.ICallRecordingService>, CallRecordingClient.ServiceReference.ICallRecordingService {
        
        public CallRecordingServiceClient() {
        }
        
        public CallRecordingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CallRecordingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CallRecordingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CallRecordingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RecordCall(CallRecordingClient.ServiceReference.CallRecord call) {
            base.Channel.RecordCall(call);
        }
        
        public System.Threading.Tasks.Task RecordCallAsync(CallRecordingClient.ServiceReference.CallRecord call) {
            return base.Channel.RecordCallAsync(call);
        }
        
        public CallRecordingClient.ServiceReference.CallRecord[] GetAllCalls() {
            return base.Channel.GetAllCalls();
        }
        
        public System.Threading.Tasks.Task<CallRecordingClient.ServiceReference.CallRecord[]> GetAllCallsAsync() {
            return base.Channel.GetAllCallsAsync();
        }
        
        public CallRecordingClient.ServiceReference.CallRecord GetCallById(int id) {
            return base.Channel.GetCallById(id);
        }
        
        public System.Threading.Tasks.Task<CallRecordingClient.ServiceReference.CallRecord> GetCallByIdAsync(int id) {
            return base.Channel.GetCallByIdAsync(id);
        }
        
        public void UpdateCall(int id, string additionalDetails) {
            base.Channel.UpdateCall(id, additionalDetails);
        }
        
        public System.Threading.Tasks.Task UpdateCallAsync(int id, string additionalDetails) {
            return base.Channel.UpdateCallAsync(id, additionalDetails);
        }
        
        public void DeleteCall(int id) {
            base.Channel.DeleteCall(id);
        }
        
        public System.Threading.Tasks.Task DeleteCallAsync(int id) {
            return base.Channel.DeleteCallAsync(id);
        }
        
        public void SaveCallsToFile() {
            base.Channel.SaveCallsToFile();
        }
        
        public System.Threading.Tasks.Task SaveCallsToFileAsync() {
            return base.Channel.SaveCallsToFileAsync();
        }
        
        public void LoadCallsFromFile() {
            base.Channel.LoadCallsFromFile();
        }
        
        public System.Threading.Tasks.Task LoadCallsFromFileAsync() {
            return base.Channel.LoadCallsFromFileAsync();
        }
        
        public CallRecordingClient.ServiceReference.CallRecord[] SearchCallsByCustomerName(string customerName) {
            return base.Channel.SearchCallsByCustomerName(customerName);
        }
        
        public System.Threading.Tasks.Task<CallRecordingClient.ServiceReference.CallRecord[]> SearchCallsByCustomerNameAsync(string customerName) {
            return base.Channel.SearchCallsByCustomerNameAsync(customerName);
        }
    }
}
